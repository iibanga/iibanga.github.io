{% assign dataset_id = vars.platform.google_ads.dataset_id %}
{% assign account_ids = vars.platform.google_ads.account_ids %}
{% assign active = vars.platform.google_ads.active %}

{% if active %}
with
    accounts as (
        select
            customer__id as account_id
          , customer__descriptiveName as account_name
        from
            `{{dataset_id}}.stream_account`
        qualify
            rank() over (
                partition by
                    customer__id
                order by
                    _time_extracted desc
            ) = 1
            and row_number() over (
                partition by
                    customer__id
                  , _time_extracted
            ) = 1
    )
  , campaigns as (
        select
            customer__id as account_id
          , campaign__id as campaign_id
          , campaign__advertisingChannelType as advertising_channel_type
          , campaign__name as campaign_name
          , format_date('%Y-%m-%d', date(campaign__startDate)) as campaign_start_date
          , format_date('%Y-%m-%d', date(campaign__endDate)) as campaign_end_date
        from
            `{{dataset_id}}.stream_campaign`
        qualify
            rank() over (
                partition by
                    campaign__id
                  , customer__id
                order by
                    _time_extracted desc
            ) = 1
            and row_number() over (
                partition by
                    campaign__id
                  , customer__id
                  , _time_extracted
            ) = 1
    )
  , ad_groups as (
        select
            customer__id as account_id
          , campaign__id as campaign_id
          , adGroup__id as ad_group_id
          , adGroup__name as ad_group_name
        from
            `{{dataset_id}}.stream_adgroups`
        qualify
            rank() over (
                partition by
                    adGroup__id
                  , campaign__id
                  , customer__id
                order by
                    _time_extracted desc
            ) = 1
            and row_number() over (
                partition by
                    adGroup__id
                  , campaign__id
                  , customer__id
                  , _time_extracted
            ) = 1
    )
  , latest_ad_data as (
        select
            *
        from
            `{{dataset_id}}.stream_ad_report`
        qualify
            rank() over (
                partition by
                    segments__date
                  , adGroupAd__ad__id
                  , adGroup__id
                  , campaign__id
                  , customer__id
                order by
                    _time_extracted desc
            ) = 1
            and row_number() over (
                partition by
                    segments__date
                  , adGroupAd__ad__id
                  , adGroup__id
                  , campaign__id
                  , customer__id
                  , _time_extracted
            ) = 1
    )
  , report as (
        select
            segments__date as date
          , customer__id as account_id
          , campaign__id as campaign_id
          , adGroup__id as ad_group_id
          , sum(metrics__impressions) as _impressions
          , sum(metrics__clicks) as _clicks
          , sum(metrics__conversions) as _conversions
          , sum(metrics__conversionsValue) as _conversions_value
          , sum(metrics__costMicros / 1000000) as _cost
          , sum(metrics__conversionsValue) as _revenue
        from
            -- `{{dataset_id}}.stream_ad_report`
            latest_ad_data
        group by
            1
          , 2
          , 3
          , 4
    )
  , latest_conversion_stats as (
        select
            *
        from
            `{{dataset_id}}.stream_ad_performance_report_conversion_stats`
        qualify
            rank() over (
                partition by
                    segments__date
                  , segments__device
                  , adGroupAd__ad__id
                  , adGroup__id
                  , campaign__id
                  , customer__id
                order by
                    _time_extracted desc
            ) = 1
            and row_number() over (
                partition by
                    segments__date
                  , segments__device
                  , adGroupAd__ad__id
                  , adGroup__id
                  , campaign__id
                  , customer__id
                  , _time_extracted
            ) = 1
    )
  , report_custom_conversions as (
        select
            segments__date as date
          , segments__conversionActionName as conversion_action_name
          , customer__id as account_id
          , campaign__id as campaign_id
          , adGroup__id as ad_group_id
          , sum(metrics__allConversions) as all_conversions
          , sum(metrics__allConversionsValue) as all_conversions_value
        from
            -- `{{dataset_id}}.stream_ad_performance_report_conversion_stats`
            latest_conversion_stats
        group by
            1
          , 2
          , 3
          , 4
          , 5
    )
  , pivoted as (
        select
            *
        from
            report_custom_conversions pivot(
                sum(all_conversions) as all_conversions
              , sum(all_conversions_value) as all_conversion_value
                for
                    conversion_action_name in (
                        /* 
                        Custom Events Here:
                         */
                        'Fake Event' as fake_event
                    )
            )
    )
  , api as (
        select
            report.*
          , campaigns.campaign_name
          , campaigns.advertising_channel_type
          , campaign_start_date
          , campaign_end_date
          , accounts.account_name
          , ad_groups.ad_group_name
          , pivoted.* except (date, campaign_id, account_id, ad_group_id)
        from
            report
            left join pivoted on report.date = pivoted.date
            and report.campaign_id = pivoted.campaign_id
            left join campaigns on report.campaign_id = campaigns.campaign_id
            left join accounts on report.account_id = accounts.account_id
            left join ad_groups on report.ad_group_id = ad_groups.ad_group_id
    )
select
    *
from
    api
where
    account_id in (
        {% for id in account_ids %}
        {% unless forloop.first %}

      , {% endunless %} '{{id}}'
        {% endfor %}
    )
    {% else %}
select
    safe_cast(null as string) as account_id
  , safe_cast(null as string) as account_name
  , safe_cast(null as string) as ad_group_id
  , safe_cast(null as string) as ad_group_name
  , safe_cast(null as string) as advertising_channel_type
  , safe_cast(null as date) as campaign_start_date
  , safe_cast(null as date) as campaign_end_date
  , safe_cast(null as float64) as all_conversions_fake_event
  , safe_cast(null as float64) as all_conversion_value_fake_event
  , safe_cast(null as string) as campaign_id
  , safe_cast(null as string) as campaign_name
  , safe_cast(null as int64) as _clicks
  , safe_cast(null as int64) as _conversions
  , safe_cast(null as int64) as _conversions_value
  , safe_cast(null as int64) as _cost
  , safe_cast(null as date) as date
  , safe_cast(null as int64) as _impressions
  , safe_cast(null as int64) as _revenue
from
    unnest ([])
    {% endif %}
